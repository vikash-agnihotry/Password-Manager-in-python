from tkinter import Tk, Label, Entry, Button, Text, END, Toplevel, messagebox, Scrollbar, Checkbutton, IntVar, Frame, filedialog, Canvas
from cryptography.fernet import Fernet
import bcrypt, os, json, random, string
import shutil
import tkinter as tk
from tkinter import messagebox
from tkinter import ttk
import openpyxl

# Directory setup for user data
DATA_DIR = "passmgr_data"
os.makedirs(DATA_DIR, exist_ok=True)
current_user = None  # Global variable for tracking logged-in user

def get_user_path(username):
    return os.path.join(DATA_DIR, username)

def generate_key():
    key_path = os.path.join(DATA_DIR, "key.key")
    if not os.path.exists(key_path):
        key = Fernet.generate_key()
        with open(key_path, "wb") as key_file:
            key_file.write(key)

def load_key():
    with open(os.path.join(DATA_DIR, "key.key"), "rb") as key_file:
        return key_file.read()

generate_key()
cipher_suite = Fernet(load_key())

def hash_password(password):
    salt = bcrypt.gensalt()
    return bcrypt.hashpw(password.encode(), salt).decode()

def check_password(password, hashed):
    return bcrypt.checkpw(password.encode(), hashed.encode())

def encrypt_data(data, filename):
    encrypted_data = cipher_suite.encrypt(json.dumps(data).encode())
    with open(filename, "wb") as file:
        file.write(encrypted_data)

def decrypt_data(filename):
    if not os.path.exists(filename):
        return {}
    with open(filename, "rb") as file:
        encrypted_data = file.read()
    return json.loads(cipher_suite.decrypt(encrypted_data).decode())

def create_window(title, size):
    window = Toplevel(root)
    window.title(title)
    window.geometry(size)
    window.configure(bg='#2E2E2E')
    window.attributes('-alpha', 0.9)
    return window

def generate_random_password():
    length = random.randint(8, 16)
    characters = string.ascii_letters + string.digits + string.punctuation
    return ''.join(random.choice(characters) for _ in range(length))

def show_generated_password():
    global password_entry
    password = generate_random_password()
    password_window = create_window("Generated Password", "400x200")
    text_area = Text(password_window, height=2, width=40, bg='#333', fg='white', font=("Arial", 12), relief='flat')
    text_area.pack(pady=20)
    text_area.insert(END, password)
    password_entry.delete(0, END)
    password_entry.insert(0, password)



def create_label(window, text):
    label = Label(window, text=text, bg='#2E2E2E', fg='white', font=("Arial", 12))
    label.pack(pady=5)

def create_entry(window, show=None):
    entry = Entry(window, bg='#333', fg='white', font=("Arial", 12), insertbackground='white', show=show, relief='flat')
    entry.pack(pady=5, ipadx=5, ipady=5)
    return entry

def create_button(window, text, command):
    button = Button(window, text=text, command=command, bg='#0078D7', fg='white', font=("Arial", 12), relief='flat', activebackground='#005A9E')
    button.pack(pady=5, ipadx=10, ipady=5)
    return button

def register():
    def save_user():
        username = username_entry.get()
        password = password_entry.get()
        secret_key = secret_key_entry.get()
        
        if username and password and secret_key:
            user_dir = get_user_path(username)
            os.makedirs(user_dir, exist_ok=True)
            user_data = {
                "username": username,
                "password": hash_password(password),
                "secret_key": cipher_suite.encrypt(secret_key.encode()).decode()
            }
            encrypt_data(user_data, os.path.join(user_dir, "data.enc"))
            messagebox.showinfo("Success", "User registered successfully!")
            register_window.destroy()
    
    register_window = create_window("Register", "400x350")
    create_label(register_window, "Username")
    username_entry = Entry(register_window, width=40)
    username_entry.pack(pady=5)
    create_label(register_window, "Password")
    password_entry = Entry(register_window, width=40, show="*")
    password_entry.pack(pady=5)
    create_label(register_window, "Secret Key (for password recovery)")
    secret_key_entry = Entry(register_window, width=40)
    secret_key_entry.pack(pady=5)
    create_button(register_window, "Register", save_user).pack(pady=10)

def forgot_password():
    def reset_password():
        username = username_entry.get()
        secret_key = secret_key_entry.get()
        new_password = new_password_entry.get()
        
        user_dir = get_user_path(username)
        user_data_file = os.path.join(user_dir, "data.enc")
        
        if os.path.exists(user_data_file):
            user_data = decrypt_data(user_data_file)
            stored_secret_key = cipher_suite.decrypt(user_data["secret_key"].encode()).decode()
            
            if secret_key == stored_secret_key:
                user_data["password"] = hash_password(new_password)
                encrypt_data(user_data, user_data_file)
                messagebox.showinfo("Success", "Password reset successfully!")
                forgot_window.destroy()
            else:
                messagebox.showerror("Error", "Incorrect secret key.")
        else:
            messagebox.showerror("Error", "User not found.")
    
    forgot_window = create_window("Forgot Password", "400x350")
    create_label(forgot_window, "Username")
    username_entry = Entry(forgot_window, width=40)
    username_entry.pack(pady=5)
    create_label(forgot_window, "Secret Key")
    secret_key_entry = Entry(forgot_window, width=40)
    secret_key_entry.pack(pady=5)
    create_label(forgot_window, "New Password")
    new_password_entry = Entry(forgot_window, width=40, show="*")
    new_password_entry.pack(pady=5)
    create_button(forgot_window, "Reset Password", reset_password).pack(pady=10)
    
def check_login(username, password, login_window):
    global current_user
    user_dir = get_user_path(username)
    user_data_file = os.path.join(user_dir, "data.enc")
    
    if os.path.exists(user_data_file):
        user_data = decrypt_data(user_data_file)
        if username == user_data.get("username") and bcrypt.checkpw(password.encode(), user_data["password"].encode()):
            current_user = username
            messagebox.showinfo("Login Successful", "Welcome!")
            login_window.destroy()
            main_app()
        else:
            messagebox.showerror("Login Failed", "Invalid credentials.")
    else:
        messagebox.showerror("Error", "User not found.")


def logout():
    global root
    if root:
        root.destroy()
        root = None
    messagebox.showinfo("Logout", "You have been logged out.")
    open_login_window()

def open_login_window():
    login_window = tk.Tk()
    login_window.title("Login")
    login_window.geometry("600x400")
    login_window.configure(bg='#2E2E2E')
    login_window.resizable(False, False)

    login_window.grid_rowconfigure(0, weight=1)
    login_window.grid_columnconfigure(1, weight=1)

    # Left panel with padding
    left_frame = tk.Frame(login_window, bg='#2E2E2E', width=180)
    left_frame.grid(row=0, column=0, sticky="ns", padx=15, pady=15)  # Added padding

    # Buttons with padding and spacing
    tk.Button(left_frame, text="Create User", command=register, bg='#BF3EFF', fg='white',
              font=("Arial", 12), relief='flat', activebackground='#005A9E', width=20, height=2).pack(pady=15, padx=10)

    tk.Button(left_frame, text="Forgot Password", command=forgot_password, bg='#FF3030', fg='black',
              font=("Arial", 12), relief='flat', activebackground='#E0A800', width=20, height=2).pack(pady=15, padx=10)

    # Add a visible separator line
    separator = tk.Canvas(login_window, width=3, bg="black", highlightthickness=0)
    separator.grid(row=0, column=1, sticky="ns")

    # Right panel (Login Form) with padding
    content_frame = tk.Frame(login_window, bg='#2E2E2E')
    content_frame.grid(row=0, column=2, sticky="nsew", padx=25, pady=20)  # Increased padding

    tk.Label(content_frame, text="Secure Password Manager", fg='white', bg='#2E2E2E',
             font=("Arial", 14, "bold")).pack(pady=10)

    tk.Label(content_frame, text="Username", fg='white', bg='#2E2E2E', font=("Arial", 12)).pack(pady=5)
    username_entry = tk.Entry(content_frame)
    username_entry.pack(fill="x", padx=10, pady=5)

    tk.Label(content_frame, text="Password", fg='white', bg='#2E2E2E', font=("Arial", 12)).pack(pady=5)
    password_entry = tk.Entry(content_frame, show="*")
    password_entry.pack(fill="x", padx=10, pady=5)

    tk.Button(content_frame, text="Login", command=lambda: check_login(username_entry.get(), password_entry.get(), login_window),
              bg='#28A745', fg='white', font=("Arial", 12), relief='flat', activebackground='#218838', width=25).pack(pady=15)

    login_window.mainloop()


def search_password():
    user_dir = get_user_path(current_user)
    pass_file = os.path.join(user_dir, "pass.enc")
    data = decrypt_data(pass_file)
    
    search_window = create_window("Search Password", "400x300")
    create_label(search_window, "Enter Username")
    search_entry = Entry(search_window, width=40)
    search_entry.pack(pady=5)
    
    def find_password():
        search_term = search_entry.get()
        results = []
        for website, credentials in data.items():
            if credentials["username"] == search_term:
                decrypted_password = cipher_suite.decrypt(credentials["password"].encode()).decode()
                results.append(f"Website: {website}\nPassword: {decrypted_password}\n{'-'*40}\n")
        
        result_text.delete(1.0, END)
        if results:
            result_text.insert(END, "\n".join(results))
        else:
            result_text.insert(END, "No passwords found for the given username.")
    
    create_button(search_window, "Search", find_password).pack(pady=5)
    result_text = Text(search_window, height=10, width=50, bg='#333', fg='white', font=("Arial", 12), relief='flat')
    result_text.pack(pady=5)

def delete_user():
    def confirm_deletion():
        username = username_entry.get()
        secret_key = secret_key_entry.get()
        user_dir = get_user_path(username)
        user_data_file = os.path.join(user_dir, "data.enc")
        pass_file = os.path.join(user_dir, "pass.enc")
        
        if not os.path.exists(user_data_file):
            messagebox.showerror("Error", "User not found.")
            return
        
        user_data = decrypt_data(user_data_file)
        stored_secret_key = cipher_suite.decrypt(user_data["secret_key"].encode()).decode()
        
        if secret_key != stored_secret_key:
            messagebox.showerror("Error", "Incorrect secret key.")
            return
        
        if os.path.exists(pass_file):
            passwords = decrypt_data(pass_file)
            if passwords:
                save_path = os.path.join(DATA_DIR, f"{username}.txt")
                with open(save_path, "w") as file:
                    for website, credentials in passwords.items():
                        file.write(f"Website: {website}\nUsername: {credentials['username']}\nPassword: {cipher_suite.decrypt(credentials['password'].encode()).decode()}\n{'-'*40}\n")
                messagebox.showinfo("Exported", f"Passwords saved to {save_path}")
        
        shutil.rmtree(user_dir)
        messagebox.showinfo("Deleted", "User account deleted successfully.")
        delete_window.destroy()
        logout()
    
    delete_window = Toplevel()
    delete_window.title("Delete User Account")
    delete_window.geometry("400x350")
    delete_window.configure(bg='#2E2E2E')
    
    Label(delete_window, text="Username", fg='white', bg='#2E2E2E', font=("Arial", 12)).pack(pady=5)
    username_entry = Entry(delete_window, width=40)
    username_entry.pack(pady=5)
    
    Label(delete_window, text="Secret Key", fg='white', bg='#2E2E2E', font=("Arial", 12)).pack(pady=5)
    secret_key_entry = Entry(delete_window, width=40, show="*")
    secret_key_entry.pack(pady=5)
    
    Button(delete_window, text="Confirm Deletion", command=confirm_deletion, bg='#D9534F', fg='white', font=("Arial", 12), relief='flat', activebackground='#C9302C').pack(pady=10)

def import_from_excel():
    user_dir = get_user_path(current_user)
    pass_file = os.path.join(user_dir, "pass.enc")

    # Open file dialog to select Excel file
    file_path = filedialog.askopenfilename(
        title="Select Password Excel File",
        filetypes=[("Excel files", "*.xlsx;*.xls")]
    )
    
    if not file_path:
        return  # User canceled file selection

    try:
        wb = openpyxl.load_workbook(file_path)
        sheet = wb.active

        data = decrypt_data(pass_file)  # Decrypt existing passwords

        imported_count, updated_count = 0, 0
        for row in sheet.iter_rows(min_row=2, values_only=True):  # Assuming first row is headers
            website, username, password = row[:3]  # First three columns

            if not (website and username and password):
                continue  # Skip invalid rows

            encrypted_password = cipher_suite.encrypt(password.encode()).decode()

            if website in data:
                if data[website]["username"] == username:
                    update = messagebox.askyesno(
                        "Duplicate Entry",
                        f"Username '{username}' for '{website}' already exists. Update password?"
                    )
                    if update:
                        data[website]["password"] = encrypted_password
                        updated_count += 1
                else:
                    messagebox.showwarning(
                        "Conflict",
                        f"A different username exists for '{website}'. Skipping entry."
                    )
            else:
                data[website] = {"username": username, "password": encrypted_password}
                imported_count += 1

        encrypt_data(data, pass_file)  # Save updated password data

        messagebox.showinfo(
            "Import Complete",
            f"Passwords Imported: {imported_count}\nUpdated: {updated_count}"
        )

    except Exception as e:
        messagebox.showerror("Import Error", f"An error occurred: {str(e)}")
        
def main_app():
    global root, left_frame, website_entry, username_entry, password_entry
    root = tk.Tk()
    root.title("Password Manager")
    root.geometry("750x500")
    root.configure(bg='#2E2E2E')
    root.resizable(True, True)

    root.grid_rowconfigure(0, weight=1)
    root.grid_columnconfigure(1, weight=1)

    # Left panel with more space
    left_frame = tk.Frame(root, bg='#2E2E2E', width=250)
    left_frame.grid(row=0, column=0, sticky="ns", padx=15, pady=15)

    tk.Label(left_frame, text="Actions", fg='white', bg='#2E2E2E', font=("Arial", 14, "bold")).pack(pady=10)

    # Function to create buttons with consistent styling
    def create_button(parent, text, command, bg_color, active_color):
        btn = tk.Button(parent, text=text, command=command, bg=bg_color, fg='white',
                        activebackground=active_color, font=("Arial", 12), relief="flat", width=20)
        btn.pack(pady=12, fill="x")  # Applied separately to avoid errors

    # Buttons with spacing
    create_button(left_frame, "Generate Password", show_generated_password, '#0078D7', '#005A9E')
    create_button(left_frame, "Retrieve Passwords", retrieve_password, '#76EE00', '#005A9E')
    create_button(left_frame, "Delete Passwords", delete_password, '#FF6103', '#005A9E')
    create_button(left_frame, "Search Password", search_password, '#FFC107', '#005A9E')
    create_button(left_frame, "Import From Excel", import_from_excel, '#48D1CC', '#C9302C')
    create_button(left_frame, "Delete User Account", delete_user, '#D9534F', '#C9302C')
    create_button(left_frame, "Logout", logout, '#912CEE', '#C9302C')

    # Right Panel (Content Frame)
    content_frame = tk.Frame(root, bg='#1E1E1E', width=550)
    content_frame.grid(row=0, column=1, sticky="nsew", padx=25, pady=20)

    tk.Label(content_frame, text="Save New Password", fg='white', bg='#1E1E1E', font=("Arial", 14, "bold")).pack(pady=10)

    tk.Label(content_frame, text="Website/Service", fg='white', bg='#1E1E1E', font=("Arial", 12)).pack(pady=5)
    website_entry = tk.Entry(content_frame)
    website_entry.pack(fill="x", padx=10, pady=5)

    tk.Label(content_frame, text="Username", fg='white', bg='#1E1E1E', font=("Arial", 12)).pack(pady=5)
    username_entry = tk.Entry(content_frame)
    username_entry.pack(fill="x", padx=10, pady=5)

    tk.Label(content_frame, text="Password", fg='white', bg='#1E1E1E', font=("Arial", 12)).pack(pady=5)
    password_entry = tk.Entry(content_frame, show="*")
    password_entry.pack(fill="x", padx=10, pady=5)

    tk.Button(content_frame, text="Save", command=save_password, 
              bg='#4B0082', fg='white', font=("Arial", 12), relief='flat', 
              activebackground='#218838', width=20).pack(pady=10)

    root.mainloop()
def save_password():
    user_dir = get_user_path(current_user)
    pass_file = os.path.join(user_dir, "pass.enc")
    website, username, password = website_entry.get(), username_entry.get(), password_entry.get()
    if website and username and password:
        encrypted_password = cipher_suite.encrypt(password.encode()).decode()
        data = decrypt_data(pass_file)
        
        if website in data and data[website]["username"] == username:
            update = messagebox.askyesno("Duplicate Entry", "Username and password already exist. Do you want to update the password?")
            if not update:
                 website_entry.delete(0, END)
                 username_entry.delete(0, END)
                 password_entry.delete(0, END)
                 return
        
        data[website] = {"username": username, "password": encrypted_password}
        encrypt_data(data, pass_file)
        messagebox.showinfo("Success", "Password saved successfully!")
        website_entry.delete(0, END)
        username_entry.delete(0, END)
        password_entry.delete(0, END)


def retrieve_password():
    user_dir = get_user_path(current_user)
    pass_file = os.path.join(user_dir, "pass.enc")
    data = decrypt_data(pass_file)
    
    passwords_window = create_window("Saved Passwords", "500x400")
    text_area = Text(passwords_window, height=20, width=60, bg='#333', fg='white', font=("Arial", 12), relief='flat')
    scrollbar = Scrollbar(passwords_window, command=text_area.yview)
    text_area.config(yscrollcommand=scrollbar.set)
    scrollbar.pack(side="right", fill="y")
    text_area.pack(pady=5, padx=5, fill="both", expand=True)
    
    if data:
        for website, credentials in data.items():
            decrypted_password = cipher_suite.decrypt(credentials["password"].encode()).decode()
            text_area.insert(END, f"Website: {website}\nUsername: {credentials['username']}\nPassword: {decrypted_password}\n{'-'*40}\n")
    else:
        text_area.insert(END, "No saved passwords found.")

def delete_password():
    user_dir = get_user_path(current_user)
    pass_file = os.path.join(user_dir, "pass.enc")
    data = decrypt_data(pass_file) or {}  # Ensure we get a dictionary, not None

    if not data:
        messagebox.showinfo("No Passwords", "No saved passwords found.")
        return

    # Create a delete window
    delete_window = create_window("Delete Passwords", "600x400")
    
    # Create canvas and frame for scrollable content
    canvas = Canvas(delete_window)
    frame = Frame(canvas, bg='#333')
    scrollbar = Scrollbar(delete_window, orient="vertical", command=canvas.yview)

    canvas.pack(side="left", fill="both", expand=True)
    scrollbar.pack(side="right", fill="y")
    canvas.create_window((0, 0), window=frame, anchor="nw")
    canvas.config(yscrollcommand=scrollbar.set)

    check_vars = {}

    for website, credentials in data.items():
        var = IntVar()
        check_vars[website] = var
        Checkbutton(frame, text=f"{website} - {credentials['username']}", variable=var, bg='#2E2E2E', fg='white', font=("Arial", 12), selectcolor='#2E2E2E').pack(anchor="w", padx=10, pady=2)

    # Update scroll region when content changes
    def update_scroll_region(event):
        canvas.configure(scrollregion=canvas.bbox("all"))

    frame.bind("<Configure>", update_scroll_region)

    def confirm_delete():
        updated_data = {w: c for w, c in data.items() if not check_vars[w].get()}
        
        if len(updated_data) == len(data):  # No passwords selected
            messagebox.showwarning("No Selection", "Please select at least one password to delete.")
            return
        
        encrypt_data(updated_data, pass_file)
        messagebox.showinfo("Success", "Selected passwords deleted successfully!")
        delete_window.destroy()

    create_button(delete_window, "Delete Selected", confirm_delete)


root = Tk()
root.withdraw()
if not any(os.scandir(DATA_DIR)):
    register()
else:
    open_login_window()
root.mainloop()

